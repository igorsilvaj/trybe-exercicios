// üöÄ Exerc√≠cio 1
// Altere o tipo das vari√°veis(var) para let ou const para que respeitem o escopo em que foram declaradas, e altere a fun√ß√£o utilizando arrow function e template literals.

// Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function;
// Modifique as vari√°veis para que respeitem o escopo onde est√£o declaradas;
// Modifique as concatena√ß√µes para template literals.
const testingScope = (escopo) => {
    if (escopo === true) {
        let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
        ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
        console.log(ifScope);
    } else {
        let elseScope = 'N√£o devo ser utilizada fora do meu escopo (else)';
        console.log(elseScope);
    }
}
testingScope(true);

// Crie uma fun√ß√£o que retorne um array em ordem crescente.
const oddsAndEvens = [13, 3, 4, 10, 7, 2];
const sortOddsAndEvens = () => oddsAndEvens.sort((a, b) => a - b);
console.log(`N√∫meros iniciais (${oddsAndEvens})\nN√∫meros ordenados (${sortOddsAndEvens()})`);

// Abaixo, voc√™ ver√° algumas especifica√ß√µes de algoritmos para desenvolver. √â fundamental que voc√™ utilize o que aprendeu sobre let, const, arrow functions, template literals e ternary operator.
// Crie uma fun√ß√£o que receba um n√∫mero e retorne seu fatorial.
// Na matem√°tica, o fatorial de um n√∫mero inteiro e positivo N, representado por N!, √© o produto de todos os seus antecessores at√© o n√∫mero um. Exemplo: 4! = 4 * 3 * 2 * 1 = 24.
// Com base nessas informa√ß√µes:
// Crie a fun√ß√£o factorial que recebe um n√∫mero como par√¢metro, utilizando arrow functions (Lembre-se de armazenar a fun√ß√£o utilizando o tipo de vari√°vel correta).
// Dentro da fun√ß√£o crie uma vari√°vel result, que ser√° o retorno final da fun√ß√£o.
// Crie a l√≥gica para retornar o fatorial de N!.
// Imprima no terminal 'Esse √© o fatorial resultado da fun√ß√£o' (Lembre-se de utilizar template literals nesse momento).
// B√¥nus: tente fazer o mesmo exerc√≠cio de forma recursiva. Spoiler: √â poss√≠vel resolver com uma linha usando ternary operator.
const factorial = (num) => num === 1 ? 1 : num * factorial(num - 1);
console.log(factorial(4));

// Crie uma fun√ß√£o que receba uma frase como par√¢metro e retorne a maior palavra contida nesta frase.
const longestWord = (phrase) => phrase.split(' ').sort((a, b) => b.length - a.length)[0];
console.log(longestWord('Ant√¥nio foi ao banheiro e n√£o sabemos o que aconteceu'));

// Crie duas fun√ß√µes JavaScript com as seguintes especifica√ß√µes:
// N√£o se esque√ßa de usar template literals
// Fun√ß√£o 1: Escreva uma fun√ß√£o que substitua a letra 'x' em uma frase.
// O nome da fun√ß√£o dever√° ser substituaX;
// A fun√ß√£o dever√° receber um nome por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel do tipo const, com o nome frase, atribuindo o valor 'Tryber x aqui!';
// A fun√ß√£o dever√° retornar uma nova frase onde o x da frase 'Tryber x aqui!' seja substitu√≠do pelo nome passado por par√¢metro.
// Exemplo:
// Par√¢metro: 'Bebeto'
// Retorno: 'Tryber Bebeto aqui!'
// Spoiler: O m√©todo split() pode ser utilizado de diferentes maneiras, como separar as palavras de um texto.
// Fun√ß√£o 2: Escreva uma fun√ß√£o que ir√° receber o retorno da Fun√ß√£o 1 por par√¢metro e retornar√° uma nova string.
// O nome da fun√ß√£o dever√° ser minhasSkills;
// A fun√ß√£o dever√° receber o retorno da Fun√ß√£o 1 - substituaX por par√¢metro;
// Declare dentro da fun√ß√£o uma vari√°vel com o nome skills, do tipo const;
// A vari√°vel skills dever√° ser um array contendo tr√™s strings com tecnologias que voc√™ j√° aprendeu.
// Crie uma var√°vel do tipo let e concatene o valor retornado da Fun√ß√£o 1 - substituaX (utilize template literals), a frase 'Minhas tr√™s principais habilidades s√£o:' e o valor da vari√°vel skills.
// Exemplo de retorno:
// Tryber Bebeto aqui!
// Minhas tr√™s principais habilidades s√£o:
// JavaScript
// HTML
// CSS